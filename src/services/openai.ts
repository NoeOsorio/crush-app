import OpenAI from 'openai'
import { OPENAI_API_KEY } from '../config/env'

const openai = new OpenAI({
  apiKey: OPENAI_API_KEY,
  dangerouslyAllowBrowser: true // Solo para desarrollo
})

type GenerateQuestionResponse = {
  question: string
  options: Array<{
    text: string
    emoji: string
    value: number // 0 = mala se√±al, 1 = neutral, 2 = buena se√±al
  }>
}

type GenerateAnalysisResponse = {
  messages: string[]
  isPositive: boolean
}

type GenerateResultResponse = {
  title: string
  description: string
  emoji: string
  advice: string
  compatibility: number // 0-100
}

// Primero definimos un tipo para las preguntas usadas
type AskedQuestion = {
  question: string
  timestamp: number
}

// Agregamos un array para almacenar las preguntas ya realizadas
let askedQuestions: AskedQuestion[] = []

export const openAIService = {
  async generateQuestion(previousAnswers: string[]): Promise<GenerateQuestionResponse> {
    const response = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        {
          role: "system",
          content: `Eres un generador de preguntas para un test de cuanto le gustas a tu crush.
            Debes generar preguntas que sean divertidas y reveladoras sobre si alguien est√° siendo utilizado en una relaci√≥n.
            Las preguntas deben ser cortas y directas.
            Son preguntas de opciones m√∫ltiples, con una respuesta positiva, negativa y neutral.
            
            IMPORTANTE: 
            - Debes responder SOLO con un JSON v√°lido
            - La pregunta NO debe ser similar a ninguna de estas preguntas previas:
              ${askedQuestions.map(q => q.question).join(" | ")}
            - Las respuestas deben seguir este patr√≥n:
              * Respuesta negativa (value: 0): Debe indicar una red flag o se√±al de desinter√©s. Usar emojis como üö©üíîüò¢üö´‚õîÔ∏è
              * Respuesta positiva (value: 2): Debe indicar inter√©s rom√°ntico. Usar emojis como üíñüíùüíïüíóüíì
              * Respuesta neutral (value: 1): Debe indicar ambig√ºedad. Usar emojis como ü§îüí≠‚ùìüòÖü´§

            Estructura JSON requerida:
            {
              "question": "¬øPregunta divertida?",
              "options": [
                {"text": "Respuesta negativa", "emoji": "üö©", "value": 0},
                {"text": "Respuesta positiva", "emoji": "üíñ", "value": 2},
                {"text": "Respuesta neutral", "emoji": "ü§î", "value": 1}
              ]
            }
            Nota: "text" no debe ser un emoji, debe ser un texto claro y conciso.
            `
        },
        {
          role: "user",
          content: `Genera una nueva pregunta divertida. Respuestas previas: ${previousAnswers.join(", ")}`
        }
      ],
      temperature: 0.9, // Aumentamos la temperatura para m√°s variedad
      response_format: { type: "json_object" }
    })

    const result = JSON.parse(response.choices[0].message.content || '{}')
    
    // Guardamos la pregunta en el historial
    askedQuestions.push({
      question: result.question,
      timestamp: Date.now()
    })

    // Limpiamos preguntas antiguas (opcional, despu√©s de 24 horas)
    askedQuestions = askedQuestions.filter(q => 
      Date.now() - q.timestamp < 24 * 60 * 60 * 1000
    )

    return result
  },

  // M√©todo para reiniciar el historial de preguntas
  resetQuestions() {
    askedQuestions = []
  },

  async generateAnalysisMessages(answer: string): Promise<GenerateAnalysisResponse> {
    const response = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [
        {
          role: "system",
          content: `Genera mensajes divertidos y sarc√°sticos para mostrar mientras se analiza una respuesta en un test de amor.
            IMPORTANTE: Debes responder SOLO con un JSON v√°lido que siga exactamente esta estructura:
            {
              "messages": ["mensaje1 ü§î", "mensaje2 üí≠", "mensaje3 üí´"],
              "isPositive": boolean
            }`
        },
        {
          role: "user",
          content: `Genera 3 mensajes cortos y graciosos basados en esta respuesta: "${answer}"`
        }
      ],
      temperature: 0.9,
      response_format: { type: "json_object" }
    })

    return JSON.parse(response.choices[0].message.content || '{}')
  },

  async generateResult(answers: string[]): Promise<GenerateResultResponse> {
    const response = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        {
          role: "system",
          content: `Eres un experto en an√°lisis de cuanto le gustas a tu crush con un toque de humor.
            Bas√°ndote en las respuestas del test, debes generar un resultado divertido pero revelador.

            IMPORTANTE:
            - Analiza el patr√≥n de las respuestas para determinar:
              * Si hay muchas red flags (se√±ales negativas)
              * Si hay se√±ales mixtas o confusas
              * Si hay se√±ales positivas claras
            
            - El porcentaje de compatibilidad debe calcularse as√≠:
              * Respuestas muy negativas reducen 20-30%
              * Respuestas neutrales mantienen o reducen 5-10%
              * Respuestas positivas suman 20-25%
            
            - El consejo debe ser humor√≠stico pero √∫til
            
            Estructura JSON requerida:
            {
              "title": "T√≠tulo que resuma la situaci√≥n de forma graciosa",
              "description": "An√°lisis detallado con toques de humor",
              "emoji": "Un emoji que represente la situaci√≥n general",
              "advice": "Consejo sarc√°stico pero √∫til",
              "compatibility": n√∫mero_entre_0_y_100
            }

            Ejemplos de t√≠tulos seg√∫n el caso:
            - Bajo inter√©s: "Houston, tenemos varios problemas üö©"
            - Se√±ales mixtas: "Ni contigo ni sin ti üé≠"
            - Alto inter√©s: "¬°Alerta de amor correspondido! üíò"
            `
        },
        {
          role: "user",
          content: `Analiza estas respuestas y genera un resultado: ${answers.join(" | ")}`
        }
      ],
      temperature: 0.8,
      response_format: { type: "json_object" }
    })

    return JSON.parse(response.choices[0].message.content || '{}')
  }
} 